#
#   python3 myclass1.py insert dkv "07.01.2024" "Huber" "11.11.2023" " " "Huber" "Reinigung" "111,11" " " " b"
#   python3 myclass1.py insert reisekosten "08. Mai 2024" "Hotel" "von nach da" "999" "99,99"
#   python3 myclass1.py insert blutdruck "09.Mai 2024" "11:33" 138 78 Ergometer
#   python3 myclass1.py insert journal '07.05.2024' 'Glas Zitronensaft, Python Programm, Clarksons Farm' '' 'Buch' ''
#
#   python3 myclass1.py read reisekosten
#   python3 myclass1.py read dkv
#   python3 myclass1.py read blutdruck
#   python3 myclass1.py read journalnew
#   python3 myclass1.py read depot
#   python3 myclass1.py read km
#
#   testen neues read python3 myclass1.py rd ""
#
import psycopg2
import time
import datetime
import os
import subprocess
#
from sys import argv
#
#
cReaTor = ""
cLeaNer = ""
vieWer = ""
ziPPer = ""
pObject = ""

today = datetime.date.today()
Today = today.strftime("%y%m%d")
toDay = today.strftime("%y%m")

old_day = datetime.timedelta(days=5)
minus_90 = today - old_day
minus_90 = minus_90.strftime("%y%m%d")

old_day3 = datetime.timedelta(days=3)
minus_3 = today - old_day3
minus_3 = minus_3.strftime("%y%m%d")

old_day1 = datetime.timedelta(days=1)
minus_1 = today - old_day1
minus_1 = minus_1.strftime("%y%m%d")

minus_2 = today - old_day1
ioaLogDelDate = minus_2.strftime("%Y%m%d")

programmUser = os.environ['USER']

database_Table=argv[2]
#
print ('Today    :', Today)
print ('Today    :', toDay)
print ('Today    :', today)
print ('Today    :', old_day)
print ('User     :', programmUser)
#
class DataBase(object): 
    #Die Klasse "DataBase" ist die Basisklasse.

    #def database(self):
    #    print "Initialise Methode - die dann jeweils mit den neuen methoden fuer jede DB ueberschrieben werden kann."
        
        def __init__(self, database_User, database_Name, database_Port, database_Type, database_Host, database_Table):
            self.database_User = database_User
            self.database_Name = database_Name
            self.database_Port = database_Port
            self.database_Type = database_Type
            self.database_Host = database_Host 
            self.database_Table = database_Table
            self.dump_Output="/Users/michaelspruck/Programmierung/Git/postgresql/newgen/"
            self.pswPath = "/Users/michaelspruck/Programmierung/Git/postgresql/newgen"
            self.ctmpg_SU = "postgres"
#
        def read_All_PG(self):

            #self.dump_Output_PostgreSQL = ""+ self.dump_Output + "/"+ self.database_Type + "/" + self.database_Host + "/" + Today + ""            
            
            print ('DB_USER : ' , self.database_User)
            print ('DB_NAME : ' , self.database_Name)
            print ('DB_PORT : ' , self.database_Port)
            print ('DB_TYPE : ' , self.database_Type)
            print ('DB_HOST : ' , self.database_Host) 
            print ('DB_Table : ' , self.database_Table)
            #print ('DB_OUT : ' , self.dump_Output_PostgreSQL)
 
            print ('get password for ' + self.database_User + " and from file " + self.pswPath + "/"+ self.database_User +"" )
            self.pswPath = ""+ self.pswPath +"/"+ self.database_Name + ""
            print (self.pswPath) 

            fobj_in = open(self.pswPath, "r")

            for line in fobj_in:
                pObject = line.rstrip()
                os.putenv('PGPASSWORD', line.rstrip())    
            print (pObject)
            #
            if argv[1] == "insert":

                if argv[2] == "dkv":
                    wertRechnungDatum=argv[3]
                    wertRechnungSteller=argv[4]
                    wertLeistungDatum=argv[5]
                    wertRezeptDatum=argv[6]
                    wertLeistungGeber=argv[7]
                    wertLeistung=argv[8]
                    wertBetrag=argv[9]
                    wertdkvAbrechnungDatum=argv[10]
                    wertdkvAbrechnungBetrag=argv[11]
                    
                    try:
                        connection = psycopg2.connect(user=self.database_User,
                                                    password=pObject,
                                                    host=self.database_Host,
                                                    port=self.database_Port,
                                                    database=self.database_Name)
                        cursor = connection.cursor()
    
                        print ('Insert in Table : ' , self.database_Table )
                        insert_query = """ INSERT INTO dkv (rechnungs_datum, rechnungs_steller, leistungs_datum, rezept_datum, leistungs_geber, leistung, betrag, dkv_abrechnungs_datum, dkv_abrechnungs_betrag) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
                        record_to_insert = (wertRechnungDatum, wertRechnungSteller, wertLeistungDatum, wertRezeptDatum, wertLeistungGeber, wertLeistung, wertBetrag, wertdkvAbrechnungBetrag, wertdkvAbrechnungDatum)
                        print(record_to_insert)
                        cursor.execute(insert_query, record_to_insert)

                        connection.commit()
                        count = cursor.rowcount
                        print(count, "Record inserted successfully into >" + self.database_Table)

                    except:
                        print("Failed to insert record into >" + self.database_Table)

                    finally:
                        # closing database connection.
                        if connection:
                            cursor.close()
                            connection.close()
                            print("DB connection is closed")

                if argv[2] == "reisekosten":
                    rk_Datum=argv[3]
                    rk_Hotel=argv[4]
                    rk_Strecke=argv[5]
                    rk_km=argv[6]
                    rk_Kosten=argv[7]
                    
                    try:
                        connection = psycopg2.connect(user=self.database_User,
                                                    password=pObject,
                                                    host=self.database_Host,
                                                    port=self.database_Port,
                                                    database=self.database_Name)
                        cursor = connection.cursor()
    
                        print ('Insert in Table : ' , self.database_Table )
                        insert_query = """ INSERT INTO reisekosten (datum, hotel, strecke, km, kosten) VALUES (%s,%s,%s,%s,%s)"""
                        record_to_insert = (rk_Datum, rk_Hotel, rk_Strecke, rk_km, rk_Kosten)
                        print(record_to_insert)
                        cursor.execute(insert_query, record_to_insert)

                        connection.commit()
                        count = cursor.rowcount
                        print(count, "Record inserted successfully into >" + self.database_Table)

                    except (Exception, psycopg2.Error) as error:
                        print("Failed to insert record into >" + self.database_Table)
                        print("Failed to insert record into  table", error)

                    finally:
                        # closing database connection.
                        if connection:
                            cursor.close()
                            connection.close()
                            print("DB connection is closed")

                if argv[2] == "blutdruck":
                    bt_Datum=argv[3]
                    bt_Zeit=argv[4]
                    bt_Sys=argv[5]
                    bt_Dia=argv[6]
                    bt_Kommentar=argv[7]
                    
                    try:
                        connection = psycopg2.connect(user=self.database_User,
                                                    password=pObject,
                                                    host=self.database_Host,
                                                    port=self.database_Port,
                                                    database=self.database_Name)
                        cursor = connection.cursor()
    
                        print ('Insert in Table : ' , self.database_Table )
                        insert_query = """ INSERT INTO blutdruck (datum, zeit, sys, dia, kommentar) VALUES (%s,%s,%s,%s,%s)"""
                        record_to_insert = (bt_Datum, bt_Zeit, bt_Sys, bt_Dia, bt_Kommentar)
                        print(record_to_insert)
                        cursor.execute(insert_query, record_to_insert)

                        connection.commit()
                        count = cursor.rowcount
                        print(count, "Record inserted successfully into >" + self.database_Table)

                    except (Exception, psycopg2.Error) as error:
                        print("Failed to insert record into >" + self.database_Table)
                        print("Failed to insert record into  table", error)

                    finally:
                        # closing database connection.
                        if connection:
                            cursor.close()
                            connection.close()
                            print("DB connection is closed")

                if argv[2] == "journal":
                    j_Datum=argv[3]
                    j_Erfolg=argv[4]
                    j_Sport=argv[5]
                    j_Buch=argv[6]
                    J_Erkenntnis=argv[7]
                    
                    try:
                        connection = psycopg2.connect(user=self.database_User,
                                                    password=pObject,
                                                    host=self.database_Host,
                                                    port=self.database_Port,
                                                    database=self.database_Name)
                        cursor = connection.cursor()
    
                        print ('Insert in Table : ' , self.database_Table )
                        #insert_query = """ INSERT INTO journalnew (datum, erfolg, sport, buch, erkenntnis) VALUES (%s,%s,%s,%s,%s)"""
                        # new DB table
                        #   insert_query = """ INSERT INTO journal (datum, erfolg, sport, buch, erkenntnis) VALUES (%s,%s,%s,%s,%s)"""
                        
                        #insert_query = " INSERT INTO "+ self.database_Table" (datum, erfolg, sport, buch, erkenntnis) VALUES (%s,%s,%s,%s,%s)"

                       #   self.pswPath = ""+ self.pswPath +"/"+ self.database_Name + ""
                        insert_query = "INSERT into "+ self.database_Table +" (datum, erfolg, sport, buch, erkenntnis) VALUES (%s,%s,%s,%s,%s)   "
                        #x="INSERT INTO "+ self_database_Table +""
                        #print(x)

                        #insert_query = 'INSERT INTO journal (datum, erfolg, sport, buch, erkenntnis) VALUES (%s,%s,%s,%s,%s)'
                        
                        print (insert_query)
                        record_to_insert = (j_Datum, j_Erfolg, j_Sport, j_Buch, J_Erkenntnis)
                        print(record_to_insert)

                        cursor.execute(insert_query, record_to_insert)
                        connection.commit()
                        count = cursor.rowcount
                        print(count, "Record inserted successfully into >" + self.database_Table)

                    except (Exception, psycopg2.Error) as error:
                        print("Failed to insert record into >" + self.database_Table)
                        print("Failed to insert record into  table", error)

                    finally:
                        # closing database connection.
                        if connection:
                            cursor.close()
                            connection.close()
                            print("DB connection is closed")
            
            
            if argv[1] == "read":
                print ('read')
                selDate = "psql -U " + self.database_User + " -p " + self.database_Port + " -h " + self.database_Host + " -d " + self.database_Name +" -c \"select * from "+ database_Table +" ; \""
                process = subprocess.Popen(selDate,stdout=subprocess.PIPE,shell=True)
                os.system(selDate)
#
#           new read definition

            if argv[1] == "rd":
                try:
                    connection = psycopg2.connect(user=self.database_User,
                                                    password=pObject,
                                                    host=self.database_Host,
                                                    port=self.database_Port,
                                                    database=self.database_Name)
                    cursor = connection.cursor()

                    cursor.execute("SELECT * from " + self.database_Table)
                    row = cursor.fetchone()

                    while row:
                           #print (str(row[0]) + " " + str(row[1]))
                           row = cursor.fetchone()
                           print(row)

                    cur = connection.cursor()
                    cur.execute("SELECT * from " + self.database_Table)
                    rows = cur.fetchall()
                    for row in rows:
                        print (row[0] , row[1] , row[2] , row[3])
                        #print ("ID = ", row[0])
                        #print ("Datum = ", row[1])
                        #print ("ADDRESS = ", row[2])
                        #print ("SALARY = ", row[3], "\n")            


                except (Exception, psycopg2.Error) as error:
                    print("Failed to read from >" + self.database_Table)
                    print("Failed to read from table", error)

                finally:
                        # closing database connection.
                    if connection:
                       cursor.close()
                       connection.close()
                       print("DB connection is closed")
            





#
if argv[1] == "read":
    database_Host="localhost"        
    database_User="mspruck"        
    database_Port="5432"        
    database_Type="PostgreSQL"        
    database_Name="ms01"
    # Aufruf read class
    objekt_PG = DataBase(database_User, database_Name, database_Port, database_Type, database_Host, database_Table)
    objekt_PG.read_All_PG()
#
if argv[1] == "insert":
    database_Host="localhost"        
    database_User="mspruck"        
    database_Port="5432"        
    database_Type="PostgreSQL"        
    database_Name="ms01" 
    # aufruf der insert class
    objekt_PG = DataBase(database_User, database_Name, database_Port, database_Type, database_Host, database_Table)
    objekt_PG.read_All_PG()
#
if argv[1] == "rd":
    database_Host="localhost"        
    database_User="mspruck"        
    database_Port="5432"        
    database_Type="PostgreSQL"        
    database_Name="ms01"
    # Aufruf read class
    objekt_PG = DataBase(database_User, database_Name, database_Port, database_Type, database_Host, database_Table)
    objekt_PG.read_All_PG()